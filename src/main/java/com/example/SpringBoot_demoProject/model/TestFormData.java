package com.example.SpringBoot_demoProject.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Column;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

/**
 * Represents the data structure for a test form,
 * mapping directly to a database table using JPA (Java Persistence API).
 * This class defines the fields and their constraints for form submissions.
 */
@Entity // Marks this class as a JPA entity, indicating it corresponds to a database table.
public class TestFormData {

    @Id // Designates 'id' as the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-incremented by the database.
    private Long id;

    @NotBlank(message = "Name cannot be blank") // Validation constraint: 'name' field cannot be null or empty.
    @Size(min = 2, max = 100, message = "Name must be between 2 and 100 characters") // Validation constraint: 'name' length.
    @Column(nullable = false) // Maps 'name' to a database column, ensuring it's not nullable at the DB level.
    private String name;

    /**
     * Default constructor. Required by JPA for entity instantiation.
     */
    public TestFormData() {
    }

    /**
     * Constructor for creating a new TestFormData instance with a specified name.
     * The 'id' will be auto-generated by the database upon persistence.
     * @param name The name associated with the form data.
     */
    public TestFormData(String name) {
        this.name = name;
    }

    /**
     * Constructor for creating a TestFormData instance with both ID and name.
     * Useful for reconstructing entities from the database or for specific testing scenarios.
     * @param id The unique identifier for the form data.
     * @param name The name associated with the form data.
     */
    public TestFormData(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    //------------------------------------------------------------------------------------------------------------------
    // Getters and Setters
    // These methods provide access and modification capabilities for the entity's properties.
    //------------------------------------------------------------------------------------------------------------------

    /**
     * Retrieves the unique identifier of the form data.
     * @return The ID of the TestFormData.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier for the form data.
     * This is typically used internally by JPA or for specific data manipulation scenarios.
     * @param id The ID to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves the name associated with the form data.
     * @return The name string.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name for the form data.
     * @param name The name string to set.
     */
    public void setName(String name) {
        this.name = name;
    }

    //------------------------------------------------------------------------------------------------------------------
    // Utility Methods
    //------------------------------------------------------------------------------------------------------------------

    /**
     * Provides a string representation of the TestFormData object.
     * Useful for logging and debugging purposes.
     * @return A string containing the ID and name of the TestFormData.
     */
    @Override
    public String toString() {
        return "TestFormData{" +
               "id=" + id +
               ", name='" + name + '\'' +
               '}';
    }
}